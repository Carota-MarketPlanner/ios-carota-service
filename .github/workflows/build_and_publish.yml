name: Build And Publish Release

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  publish:
    name: Build iOS App
    runs-on: macos-latest  # Usa uma máquina macOS
    needs: [build-xcframework]

    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Baixar XCFramework do primeiro workflow
        uses: actions/download-artifact@v3
        with:
          name: xcframework-${{ env.NAME }}
          path: build/${{ env.NAME }}.xcframework

      - name: Compact .xcframework
        run: |
          cd build
          zip -r ${{ env.NAME }}.zip ${{ env.NAME }}.xcframework

      - name: Verificar se o arquivo já existe no Artifactory
        run: |
          URL="https://artifactory.carotaapp.com/artifactory/ios-repo/${{ env.NAME }}/${{ env.VERSION }}/${{ env.NAME }}.zip"

          # Verifica se o arquivo já existe (HEAD request)
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_PASSWORD }}" -I "$URL")

          if [[ "$RESPONSE" == "200" ]]; then
            echo "⚠️ Arquivo já existe no Artifactory! Código HTTP: $RESPONSE"
            echo "Arquivo: $URL"
            exit 1  # Se quiser impedir o upload, falhe aqui
          fi

      - name: Upload para o Artifactory com curl
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_PASSWORD }}" \
          -T "build/${{ env.NAME }}.zip" \
          "https://artifactory.carotaapp.com/artifactory/ios-repo/${{ env.NAME }}/${{ env.VERSION }}/${{ env.NAME }}.zip")

          if [[ "$RESPONSE" =~ ^2 ]]; then
            echo "✅ Upload bem-sucedido! Código HTTP: $RESPONSE"
          else
            echo "❌ Falha no upload! Código HTTP: $RESPONSE"
            exit 1
          fi